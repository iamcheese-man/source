-- ðŸš€ Advanced Stealth Adonis Bypass (Require-Hook + Remote Filter)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- List of harmful function names inside Adonis modules
local badFunctions = {
    "Crash","CPUCrash","GPUCrash","Shutdown","SoftShutdown",
    "Kick","SoftKick","Seize","BlockInput","Break","Lock",
    "SetCore","ServerKick","ServerShutdown","Ban","Mute",
    "Freeze","TeleportKill","ForceReset","CrashClient",
    "CrashServer","MemoryLeak","BlackScreen","KickAll"
}

-- Simple table find
local function tableFind(tbl, val)
    for i = 1, #tbl do if tbl[i] == val then return true end end
    return false
end

-- Neutralize a module table in place
local function neutralizeModule(modTable)
    if type(modTable) ~= "table" then return end
    for name, fn in pairs(modTable) do
        if tableFind(badFunctions, name) and type(fn) == "function" then
            modTable[name] = function(...) 
                warn("[Bypass] Blocked Adonis:", name) 
                return nil 
            end
        end
    end
end

-- 1) Override require() to catch Adonis modules on load
do
    local oldRequire = require
    local adonisKeywords = { "adonis", "clientcommands", "security", "modules" }

    _G.require = function(mod)
        local result = oldRequire(mod)
        if typeof(mod) == "Instance" and mod.Name then
            local lname = mod.Name:lower()
            for _, kw in ipairs(adonisKeywords) do
                if lname:find(kw) then
                    pcall(neutralizeModule, result)
                    break
                end
            end
        end
        return result
    end
end

-- 2) Patch any already-loaded Adonis modules
for _, mod in ipairs(getloadedmodules()) do
    if mod.Name:lower():find("adonis") then
        local ok, env = pcall(getsenv, mod)
        if ok then
            -- Some Adonis modules return their table via require
            neutralizeModule(env)
        end
        local ok2, mt = pcall(getmetatable, mod)
        if ok2 and type(mt) == "table" then
            -- In case module uses metatable entries
            for k, v in pairs(mt) do
                if type(v) == "function" then
                    mt[k] = function(...) return nil end
                end
            end
        end
    end
end

-- 3) Intercept Adonis command RemoteEvents in ReplicatedStorage
for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
    if obj:IsA("RemoteEvent") and obj.Name:lower():find("client") then
        obj.OnClientEvent:Connect(function(cmd, ...)
            if type(cmd) == "string" and tableFind(badFunctions, cmd) then
                warn("[Bypass] Blocked Adonis Remote Command:", cmd)
                return
            end
            -- let through any other events
        end)
    end
end

print("[Bypass] Advanced Adonis stealth bypass loaded.")
